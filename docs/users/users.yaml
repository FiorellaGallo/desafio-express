paths:
  /api/users/:
    get:
      summary: Obtener una lista paginada de usuarios
      tags: 
        - Users
      parameters:
        - in: query
          name: limit
          required: false
          schema:
            type: integer
            minimum: 1
            default: 10
          description: Cantidad de resultados por página
        - in: query
          name: page
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Número de página
      responses:
        '200':
          description: Respuesta exitosa
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Estado de la respuesta
                  users:
                    type: array
                    items:
                      $ref: '#components/schemas/User'
                      description: Lista de usuarios                  
        '500':
          description: Error interno del servidor
    post:
      security:
        - BearerAuth: []
      summary: Crear un nuevo usuario
      tags: 
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#components/schemas/User'
      responses:
        '200':
          description: Usuario creado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Estado de la respuesta
                  user:
                    $ref: '#components/schemas/User'
                    description: Usuario creado
                  message:
                    type: string
                    description: Mensaje de éxito
        '500':
          description: Error interno del servidor
  /api/users/all:
    get:
      summary: Obtener todos los usuarios
      tags: 
        - Users
      responses:
        '200':
          description: Lista de todos los usuarios
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Estado de la respuesta
                  allUser:
                    type: array
                    items:
                    $ref: '#components/schemas/User' 
                    description: Lista de todos los usuarios
        '500':
          description: Error interno del servidor
  /api/users/{id}:
    get:
      summary: Obtener un usuario por su ID
      tags: 
        - Users
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID del usuario que se desea obtener
      responses:
        '200':
          description: Usuario encontrado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Estado de la respuesta
                  user:
                    $ref: '#components/schemas/User'
                    description: Usuario encontrado
        '404':
          description: Usuario no encontrado
        '500':
          description: Error interno del servidor
    put:
      summary: Actualizar un usuario por su ID
      tags: 
        - Users
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID del usuario que se desea actualizar
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#components/schemas/User'
      responses:
        '200':
          description: Usuario actualizado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Estado de la respuesta
                  message:
                    type: string
                    description: Mensaje de éxito
        '404':
          description: Usuario no encontrado
        '500':
          description: Error interno del servidor
    delete:
      summary: Eliminar un usuario por su ID
      tags: 
        - Users
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID del usuario que se desea eliminar
      responses:
        '200':
          description: Usuario eliminado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Estado de la respuesta
                  message:
                    type: string
                    description: Mensaje de éxito
        '404':
          description: Usuario no encontrado
        '500':
          description: Error interno del servidor
  /api/users/premium/{id}:
    post: 
      summary: Actualizar el rol de un usuario por su ID
      tags: 
        - Users
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID del usuario cuyo rol se desea actualizar
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                premium:
                  type: boolean
                  description: Bandera que indica si el usuario debe tener rol premium
      responses:
        '200':
          description: Rol de usuario actualizado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Estado de la respuesta
                  message:
                    type: string
                    description: Mensaje de éxito
        '404':
          description: Usuario no encontrado
        '500':
          description: Error interno del servidor
  /api/users/{id}/documents:
    post:
      summary: Agregar documentos a un usuario por su ID
      tags: 
        - Users
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID del usuario al que se desean agregar documentos
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                profiles:
                  type: array
                  items:
                    type: string
                    format: binary
                    description: Archivos de imágenes de perfil (opcional)
                products:
                  type: array
                  items:
                    type: string
                    format: binary
                    description: Archivos de imágenes de productos (opcional)
                documents:
                  type: array
                  items:
                    type: string
                    format: binary
                    description: Archivos de documentos (opcional)
      responses:
        '200':
          description: Documentos agregados exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Estado de la respuesta
                  message:
                    type: string
                    description: Mensaje de éxito
        '404':
          description: Usuario no encontrado
        '500':
          description: Error interno del servidor
  /api/users/delete/connection:
    post:
      summary: Eliminar usuarios inactivos programadamente
      tags: 
        - Users
      description: Este endpoint programado ejecuta una tarea para eliminar usuarios inactivos que no han iniciado sesión en los últimos 2 días. La eliminación se realiza automáticamente de acuerdo con un cron programado.
      responses:
        '200':
          description: Operación programada ejecutada con éxito
        '500':
          description: Error interno del servidor
  









    
components:
  schemas:
    User:
      type: object
      properties:
        firstName:
          type: string
          description: Nombre del usuario
        lastName:
          type: string
          description: Apellido del usuario
        email:
          type: string
          description: Correo electrónico del usuario (debe ser único)
        age:
          type: number
          description: Edad del usuario (predeterminada a 18 si no se proporciona)
        password:
          type: string
          description: Contraseña del usuario
        cart:
          type: string
          description: ID del carrito asociado al usuario (referencia a otro esquema)
        role:
          type: string
          description: ID del rol del usuario (referencia a otro esquema)
        isAdmin:
          type: boolean
          description: Indica si el usuario es un administrador (predeterminado a false)
        documents:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                description: Nombre del documento
              reference:
                type: string
                description: Referencia al documento
        lastConnection:
          type: string
          format: date-time
          description: Fecha y hora de la última conexión del usuario (predeterminada a la fecha actual)
      example:
        firstName: 'John'
        lastName: 'Doe'
        email: 'johndoe@example.com'
        age: 30
        password: hashed_password_here
        cart: cart_id_here 
        role: role_id_here
        isAdmin: false
        documents: [
            {
              name: Document1,
              reference: http://example.com/document1.pdf
            },
            {
              name: Document2,
              reference: http://example.com/document2.pdf
            }
          ]
        lastConnection: '2023-09-06T14:30:00Z' 
        
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
        